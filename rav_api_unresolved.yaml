openapi: 3.0.0
info:
  description: RAV API
  version: "1.0.0-oas3"
  title: RAV API
  contact:
    email: name@mail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: developers
    description: Operations available to regular developers
paths:
  /configuration/{expID}:
    parameters:
      - name: "expID"
        description: >
          Identifier of experiment
        in: "path"
        schema:
          type: string
        required: true
    post:
      tags:
        - developers
      summary: adds configuration for an experiment
      operationId: setConfigurationExp
      description: Sets a new configuration on the RAV module
      responses:
        '200':
          description: configuration received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configurationResp'
        '400':
          description: malformed JSON content
        '401':
          description: unsupported request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/configurationDict'
        description: New configuration for the module
    get:
      tags:
        - developers
      summary: get the configuration for an experiment
      operationId: getConfigurationExp
      description: |
        Returns the current configuration of the RAV module
      responses:
        '200':
          description: SUCCESS,
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/configurationDict'
  /queue:
    get:
      tags:
        - developers
      summary: dump list of active RAV instances
      operationId: getResultsCommand
      description: |
        Returns the list of all the rav instances
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResultsList'
  /queue/{expID}:
    parameters:
      - name: "expID"
        description: >
          Identifier of experiment
        in: "path"
        schema:
          type: string
        required: true
    get:
      tags:
        - developers
      summary: dump results for specific experiment
      operationId: getExpResults
      description: |
        Returns the results of the specific experiment
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validationResultsInstance'
  /terminate/{expID}:
    parameters:
      - name: "expID"
        description: >
          Identifier of experiment
        in: "path"
        schema:
          type: string
        required: true
    get:
      tags:
        - developers
      summary: terminate current step of experiment
      operationId: terminateCurrentStep
      description: |
        Terminates the current step of the experiment
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commandResponse'
  /step/{expID}:
    parameters:
    - name: "expID"
      description: >
        Identifier of experiment
      in: "path"
      schema:
        type: string
      required: true
    get:
      tags:
        - developers
      summary: add step to experiment
      operationId: addStepToExp
      description: |
        Adds additional step to experiment
      responses:
        '200':
          description: SUCCESS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commandResponse'
servers:
  - url: 'https://virtserver.swaggerhub.com/myRAVorg/RAV_latest/1.0.0'
components:
  schemas:
    configurationDict:
      type: object
      required:
        - vertical
        - expID
        - tcID
        - configuration
      properties:
        vertical:
          type: string
          example: "Smart Transportation"
        expID:
          type: string
          example: "ea0b4e14-8b54-4a7d-8635-8e0dacad334b"
        tcID:
          type: string
          example: "5e28a691-2a58-432f-a730-0fc98a9e75b8"
        configuration:
          $ref: '#/components/schemas/configuration'
    configurationResp:
      type: object
      properties:
        experiment found:
          type: boolean
          example: true
        status:
          type: string
          example: "running"
        instances list:
          type: array
          items:
            $ref: '#/components/schemas/configurationDict'
    configuration:
      type: object
      required:
        - topics
        - publish
      properties:
        topics:
          type: array
          items:
            $ref: '#/components/schemas/topic'
        publish:
          type: array
          items:
            $ref: '#/components/schemas/publishtopic'
    topic:
      type: object
      required:
        - brokerAddr
        - topic
        - metric
      properties:
        brokerAddr:
          type: string
          example: '127.0.0.1:9092'
        topic:
          type: string
          example: metric_1_topic
        metric:
          type: string
          example: metric_1_name
    publishtopic:
      type: object
      required:
        - brokerAddr
        - topic
        - kpi
      properties:
        brokerAddr:
          type: string
          example: '127.0.0.1:9092'
        topic:
          type: string
          example: output_kpi_1_topic
        kpi:
          type: string
          example: output_kpi_1_name
    validationResultsList:
      type: array
      items:
        $ref: '#/components/schemas/validationResultsInstance'
    validationResultsInstance:
      type: object
      properties:
        expID:
          type: string
          example: '123af1rcxhauq13-13r142f1-13f13f-121e'
        tcID:
          type: string
          example: 'effect of latency on deviation'
        configuration:
          $ref: '#/components/schemas/configuration'
        steps:
          type: number
          example: 2
        added:
          type: string
          example: "02/06/2020, 04:22:36"
        finished:
          type: string
          example: "02/06/2020, 04:23:47"
        status:
          type: string
          example: 'finished'
        validation:
          $ref: '#/components/schemas/validationResults'
    validationResults:
      type: object
      additionalProperties: true
    commandResponse:
      type: object
      properties:
        expID: 
          type: string
          example: '123af1rcxhauq13-13r142f1-13f13f-121e'
        status:
          type: string
          example: 'running'